// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniBank.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MiniBank.Data.Migrations
{
    [DbContext(typeof(MiniBankContext))]
    partial class MiniBankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("MiniBank.Data.BankAccounts.BankAccountDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AmountOfMoney")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_of_money");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("integer")
                        .HasColumnName("currency_code");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("boolean")
                        .HasColumnName("is_opened");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bank_account");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("MiniBank.Data.Transactions.TransactionDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AmountOfMoney")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_of_money");

                    b.Property<Guid>("ReplenishmentAccount")
                        .HasColumnType("uuid")
                        .HasColumnName("replenishment_account");

                    b.Property<Guid>("WithdrawalAccount")
                        .HasColumnType("uuid")
                        .HasColumnName("withdrawal_account");

                    b.HasKey("Id")
                        .HasName("pk_transaction");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MiniBank.Data.Users.UserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MiniBank.Data.BankAccounts.BankAccountDbModel", b =>
                {
                    b.HasOne("MiniBank.Data.Users.UserDbModel", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniBank.Data.Users.UserDbModel", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
